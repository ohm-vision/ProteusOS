services:
  nginx:
    image: nginx:latest
    ports:
      - "${PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/apps:/etc/nginx/conf.d/apps:ro
      - ./nginx/utils:/etc/nginx/conf.d/utils:ro
    command: [nginx-debug, '-g', 'daemon off;']
    depends_on:
      - web
      - agent
  agent:
    build:
      context: ./agent
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
        TERRAFORM_VERSION: ${TERRAFORM_VERSION:-1.10.5}
    command: npm run start:dev
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - MODULES_PATH=/modules
      - FRONTEND_PUBLIC_ENDPOINT=http://localhost:${PORT:-80}
      - TERRAFORM_PLATFORM_NAME=${TERRAFORM_PLATFORM_NAME:-proteus}
      - TERRAFORM_DOMAIN_NAME=${COMPOSE_PROJECT_NAME:-proteus}
    volumes:
      - type: bind
        source: ./agent
        target: /app
      - type: bind
        source: ./modules
        target: /modules
  web:
    build:
      context: ./web
      # dockerfile: Dockerfile
      dockerfile_inline: |
        # Stage 1: Build
        FROM node:lts-alpine AS builder

        ARG NODE_ENV="production"

        # Set the working directory
        WORKDIR /app

        # Copy the rest of the application code
        COPY . .

        # Clean old cache files
        RUN rm -rf ./dist ./node_modules

        # Build the application
        RUN npm ci
      args:
        NODE_ENV: ${NODE_ENV:-production}
    command: npm run dev
    depends_on:
      - agent
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_ENDPOINT=http://localhost:${PORT:-80}
      - NEXT_INTERNAL_API_ENDPOINT=http://agent:3000
    volumes:
      - type: bind
        source: ./web
        target: /app
